/*
 * generated by Xtext 2.10.0
 */
package org.eclipse.papyrusrt.umlrt.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.UnorderedGroup;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class UmlRtTextGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrusrt.umlrt.UmlRtText.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cModelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cModelAction_1 = (Action)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPackagedElementAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPackagedElementPackageableElementParserRuleCall_4_0 = (RuleCall)cPackagedElementAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		/// ** UML::Model ** / Model uml::Model:
		//	'model' {uml::Model} name=ID '{'
		//	packagedElement+=PackageableElement*
		//	'}'
		@Override public ParserRule getRule() { return rule; }
		
		//'model' {uml::Model} name=ID '{' packagedElement+=PackageableElement* '}'
		public Group getGroup() { return cGroup; }
		
		//'model'
		public Keyword getModelKeyword_0() { return cModelKeyword_0; }
		
		//{uml::Model}
		public Action getModelAction_1() { return cModelAction_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//packagedElement+=PackageableElement*
		public Assignment getPackagedElementAssignment_4() { return cPackagedElementAssignment_4; }
		
		//PackageableElement
		public RuleCall getPackagedElementPackageableElementParserRuleCall_4_0() { return cPackagedElementPackageableElementParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class PackageableElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrusrt.umlrt.UmlRtText.PackageableElement");
		private final RuleCall cPackageParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		/// ** UML::PackageableElement ** / PackageableElement uml::PackageableElement:
		//	Package
		@Override public ParserRule getRule() { return rule; }
		
		//Package
		public RuleCall getPackageParserRuleCall() { return cPackageParserRuleCall; }
	}
	public class PackageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrusrt.umlrt.UmlRtText.Package");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cProtocolContainerParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cModelParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		/// ** UML::Package ** / Package uml::Package:
		//	ProtocolContainer | Model
		@Override public ParserRule getRule() { return rule; }
		
		//ProtocolContainer | Model
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ProtocolContainer
		public RuleCall getProtocolContainerParserRuleCall_0() { return cProtocolContainerParserRuleCall_0; }
		
		//Model
		public RuleCall getModelParserRuleCall_1() { return cModelParserRuleCall_1; }
	}
	public class ProtocolContainerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrusrt.umlrt.UmlRtText.ProtocolContainer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cProtocolContainerAction_0 = (Action)cGroup.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_1 = (UnorderedGroup)cGroup.eContents().get(1);
		private final Assignment cPackagedElementAssignment_1_0 = (Assignment)cUnorderedGroup_1.eContents().get(0);
		private final RuleCall cPackagedElementProtocolParserRuleCall_1_0_0 = (RuleCall)cPackagedElementAssignment_1_0.eContents().get(0);
		private final Assignment cPackagedElementAssignment_1_1 = (Assignment)cUnorderedGroup_1.eContents().get(1);
		private final RuleCall cPackagedElementRTMessageSetParserRuleCall_1_1_0 = (RuleCall)cPackagedElementAssignment_1_1.eContents().get(0);
		
		/// ** UML-RT::ProtocolContainer ** / ProtocolContainer umlrt::ProtocolContainer:
		//	{umlrt::ProtocolContainer} (packagedElement+=Protocol & packagedElement+=RTMessageSet*)
		@Override public ParserRule getRule() { return rule; }
		
		//{umlrt::ProtocolContainer} (packagedElement+=Protocol & packagedElement+=RTMessageSet*)
		public Group getGroup() { return cGroup; }
		
		//{umlrt::ProtocolContainer}
		public Action getProtocolContainerAction_0() { return cProtocolContainerAction_0; }
		
		//(packagedElement+=Protocol & packagedElement+=RTMessageSet*)
		public UnorderedGroup getUnorderedGroup_1() { return cUnorderedGroup_1; }
		
		//packagedElement+=Protocol
		public Assignment getPackagedElementAssignment_1_0() { return cPackagedElementAssignment_1_0; }
		
		//Protocol
		public RuleCall getPackagedElementProtocolParserRuleCall_1_0_0() { return cPackagedElementProtocolParserRuleCall_1_0_0; }
		
		//packagedElement+=RTMessageSet*
		public Assignment getPackagedElementAssignment_1_1() { return cPackagedElementAssignment_1_1; }
		
		//RTMessageSet
		public RuleCall getPackagedElementRTMessageSetParserRuleCall_1_1_0() { return cPackagedElementRTMessageSetParserRuleCall_1_1_0; }
	}
	public class CollaborationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrusrt.umlrt.UmlRtText.Collaboration");
		private final RuleCall cProtocolParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		/// ** UML::Interface ** / Collaboration uml::Collaboration:
		//	Protocol
		@Override public ParserRule getRule() { return rule; }
		
		//Protocol
		public RuleCall getProtocolParserRuleCall() { return cProtocolParserRuleCall; }
	}
	public class ProtocolElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrusrt.umlrt.UmlRtText.Protocol");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProtocolKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cProtocolAction_1 = (Action)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		/// ** UML-RT::Protocol ** / Protocol umlrt::Protocol:
		//	'protocol' {umlrt::Protocol} name=ID
		@Override public ParserRule getRule() { return rule; }
		
		//'protocol' {umlrt::Protocol} name=ID
		public Group getGroup() { return cGroup; }
		
		//'protocol'
		public Keyword getProtocolKeyword_0() { return cProtocolKeyword_0; }
		
		//{umlrt::Protocol}
		public Action getProtocolAction_1() { return cProtocolAction_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}
	public class InterfaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrusrt.umlrt.UmlRtText.Interface");
		private final RuleCall cRTMessageSetParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		/// ** UML::Interface ** / Interface uml::Interface:
		//	RTMessageSet
		@Override public ParserRule getRule() { return rule; }
		
		//RTMessageSet
		public RuleCall getRTMessageSetParserRuleCall() { return cRTMessageSetParserRuleCall; }
	}
	public class RTMessageSetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrusrt.umlrt.UmlRtText.RTMessageSet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInterfaceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cRTMessageSetAction_1 = (Action)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		/// ** UML-RT::RTMessageSet ** / RTMessageSet umlrt::RTMessageSet:
		//	'interface' {umlrt::RTMessageSet} name=ID
		@Override public ParserRule getRule() { return rule; }
		
		//'interface' {umlrt::RTMessageSet} name=ID
		public Group getGroup() { return cGroup; }
		
		//'interface'
		public Keyword getInterfaceKeyword_0() { return cInterfaceKeyword_0; }
		
		//{umlrt::RTMessageSet}
		public Action getRTMessageSetAction_1() { return cRTMessageSetAction_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}
	
	
	private final ModelElements pModel;
	private final PackageableElementElements pPackageableElement;
	private final PackageElements pPackage;
	private final ProtocolContainerElements pProtocolContainer;
	private final CollaborationElements pCollaboration;
	private final ProtocolElements pProtocol;
	private final InterfaceElements pInterface;
	private final RTMessageSetElements pRTMessageSet;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public UmlRtTextGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pPackageableElement = new PackageableElementElements();
		this.pPackage = new PackageElements();
		this.pProtocolContainer = new ProtocolContainerElements();
		this.pCollaboration = new CollaborationElements();
		this.pProtocol = new ProtocolElements();
		this.pInterface = new InterfaceElements();
		this.pRTMessageSet = new RTMessageSetElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.eclipse.papyrusrt.umlrt.UmlRtText".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	/// ** UML::Model ** / Model uml::Model:
	//	'model' {uml::Model} name=ID '{'
	//	packagedElement+=PackageableElement*
	//	'}'
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	/// ** UML::PackageableElement ** / PackageableElement uml::PackageableElement:
	//	Package
	public PackageableElementElements getPackageableElementAccess() {
		return pPackageableElement;
	}
	
	public ParserRule getPackageableElementRule() {
		return getPackageableElementAccess().getRule();
	}
	
	/// ** UML::Package ** / Package uml::Package:
	//	ProtocolContainer | Model
	public PackageElements getPackageAccess() {
		return pPackage;
	}
	
	public ParserRule getPackageRule() {
		return getPackageAccess().getRule();
	}
	
	/// ** UML-RT::ProtocolContainer ** / ProtocolContainer umlrt::ProtocolContainer:
	//	{umlrt::ProtocolContainer} (packagedElement+=Protocol & packagedElement+=RTMessageSet*)
	public ProtocolContainerElements getProtocolContainerAccess() {
		return pProtocolContainer;
	}
	
	public ParserRule getProtocolContainerRule() {
		return getProtocolContainerAccess().getRule();
	}
	
	/// ** UML::Interface ** / Collaboration uml::Collaboration:
	//	Protocol
	public CollaborationElements getCollaborationAccess() {
		return pCollaboration;
	}
	
	public ParserRule getCollaborationRule() {
		return getCollaborationAccess().getRule();
	}
	
	/// ** UML-RT::Protocol ** / Protocol umlrt::Protocol:
	//	'protocol' {umlrt::Protocol} name=ID
	public ProtocolElements getProtocolAccess() {
		return pProtocol;
	}
	
	public ParserRule getProtocolRule() {
		return getProtocolAccess().getRule();
	}
	
	/// ** UML::Interface ** / Interface uml::Interface:
	//	RTMessageSet
	public InterfaceElements getInterfaceAccess() {
		return pInterface;
	}
	
	public ParserRule getInterfaceRule() {
		return getInterfaceAccess().getRule();
	}
	
	/// ** UML-RT::RTMessageSet ** / RTMessageSet umlrt::RTMessageSet:
	//	'interface' {umlrt::RTMessageSet} name=ID
	public RTMessageSetElements getRTMessageSetAccess() {
		return pRTMessageSet;
	}
	
	public ParserRule getRTMessageSetRule() {
		return getRTMessageSetAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
