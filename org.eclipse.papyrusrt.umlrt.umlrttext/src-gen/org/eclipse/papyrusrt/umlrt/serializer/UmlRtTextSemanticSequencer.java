/*
 * generated by Xtext 2.10.0
 */
package org.eclipse.papyrusrt.umlrt.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.papyrusrt.umlrt.services.UmlRtTextGrammarAccess;
import org.eclipse.papyrusrt.umlrt.umlrt.Protocol;
import org.eclipse.papyrusrt.umlrt.umlrt.ProtocolContainer;
import org.eclipse.papyrusrt.umlrt.umlrt.RTMessageSet;
import org.eclipse.papyrusrt.umlrt.umlrt.UmlrtPackage;
import org.eclipse.uml2.uml.Model;
import org.eclipse.uml2.uml.UMLPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class UmlRtTextSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private UmlRtTextGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == UMLPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case UMLPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			}
		else if (epackage == UmlrtPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case UmlrtPackage.PROTOCOL:
				sequence_Protocol(context, (Protocol) semanticObject); 
				return; 
			case UmlrtPackage.PROTOCOL_CONTAINER:
				sequence_ProtocolContainer(context, (ProtocolContainer) semanticObject); 
				return; 
			case UmlrtPackage.RT_MESSAGE_SET:
				sequence_RTMessageSet(context, (RTMessageSet) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *     PackageableElement returns Model
	 *     Package returns Model
	 *
	 * Constraint:
	 *     (name=ID packagedElement+=PackageableElement*)
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PackageableElement returns ProtocolContainer
	 *     Package returns ProtocolContainer
	 *     ProtocolContainer returns ProtocolContainer
	 *
	 * Constraint:
	 *     (packagedElement+=Protocol | packagedElement+=RTMessageSet)*
	 */
	protected void sequence_ProtocolContainer(ISerializationContext context, ProtocolContainer semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Collaboration returns Protocol
	 *     Protocol returns Protocol
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_Protocol(ISerializationContext context, Protocol semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, UMLPackage.Literals.NAMED_ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, UMLPackage.Literals.NAMED_ELEMENT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getProtocolAccess().getNameIDTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Interface returns RTMessageSet
	 *     RTMessageSet returns RTMessageSet
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_RTMessageSet(ISerializationContext context, RTMessageSet semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, UMLPackage.Literals.NAMED_ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, UMLPackage.Literals.NAMED_ELEMENT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRTMessageSetAccess().getNameIDTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
}
