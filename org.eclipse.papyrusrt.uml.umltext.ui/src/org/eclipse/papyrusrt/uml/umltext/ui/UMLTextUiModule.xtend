/*
 * generated by Xtext 2.10.0
 */
package org.eclipse.papyrusrt.uml.umltext.ui

import com.google.inject.Inject
import java.io.InputStream
import org.eclipse.core.runtime.CoreException
import org.eclipse.core.runtime.IProgressMonitor
import org.eclipse.jface.text.IDocument
import org.eclipse.papyrusrt.uml.umltext.parser.antlr.UMLTextParser
import org.eclipse.xtend.lib.annotations.FinalFieldsConstructor
import org.eclipse.xtext.resource.XtextResourceSet
import org.eclipse.xtext.ui.editor.model.XtextDocumentProvider

/**
 * Use this class to register components to be used within the Eclipse IDE.
 */
@FinalFieldsConstructor
class UMLTextUiModule extends AbstractUMLTextUiModule {
	
	/**
	 * Bind our custom document provider using dependency injection 
	 **/
	def Class<? extends XtextDocumentProvider> bindXtextDocumentProvider(){
		UMLTextDocumentProvider
	}
	
}

/** UMLText Document Provider **/
class UMLTextDocumentProvider extends XtextDocumentProvider {
	
	/** 
	 * Parser (automatically bound by Xtext through dependency injection) 
	 **/
	@Inject
	UMLTextParser parser
	
	/**
	 * Resource Set (automatically bound by Xtext through dependency injection)
	 * Note: We will probably be able to delete this as the resource management
	 * 		 will be implicitly managed by the transformation (no need to save the resource)
	 **/
	@Inject 
	XtextResourceSet resourceSet
	
	/*
	 * Constructor - No Parameters 
	 */
	new() {
		println("UMLTextDocumentProvider.new()")
	}
	
	/**
	 * Set Document Content
	 * 		Description 
	 * 			Given an inputStream representing the actual content of the model resource, 
	 * 			it sets up the document content, i.e. the actual text in the editor.
	 * 		Point of Interest 
	 * 			Overriding this method, we can set up the generation of the actual text in
	 * 			the editor as the result of a model2text transformation from the UML resource
	 * 			to its textual counterpart conforming to the Xtext grammar.
	 * 			[Note however that we don't need any change in this case as the grammar is
	 * 			 already producing UML elements. Possible changes could be done in order
	 * 			 to manage those situations in which the UML model has been changed using 
	 * 			 another editor,e.g. graphical UML editor, introducing elements which are
	 * 			 not included in the Xtext grammar.
	 * 			 Considering the current grammar, for example, this issue would emerge whenever
	 * 			 creating a Class instance 'inside' a Model instance without a proper container
	 * 			 Package instance.
	 * 			[OK]								[!OK] 
	 * 			Model 								Model
	 * 				Package 							Class
	 * 					Class
	 */
	override protected setDocumentContent(IDocument document, InputStream contentStream, String encoding) throws CoreException {
		println("UMLTextDocumentProvider.setDocumentContent(IDocument document, InputStream inputStream, String encoding)")
		super.setDocumentContent(document, contentStream, encoding)	
	}
	
	/**
	 * Do Save Document
	 * 		Description
	 * 			Given a resource (element) and a document, this method manages to persist the content of the document into
	 * 			the resource (which can be obtained from the element parameter).
	 * 		Point of Interest 
	 * 			In the opposite direction of setDocumentContent, this method could be used to change the way a given 
	 * 			textual content is persisted into the resource. It is here where, for example, we should perform the 
	 * 			changes needed to persist a stereotyped element from its Ecore representation (the one defined in the grammar)
	 * 			to its actual UML element(s) (extended element + stereotype application).
	 * 			In order to do this, we can just parse the text contained in the document and run a model2model transformation
	 * 			from the Ecore Xtext model to its corresponding UML model.
	 */
	override protected doSaveDocument(IProgressMonitor monitor, Object element, IDocument document, boolean overwrite) throws CoreException {
		super.doSaveDocument(monitor, element, document, overwrite)
	}
}

/** Example : Model2Text Transformation Empty Stub **/
class UML2UMLTextTransformation {
	
	new () {
		println("UML2UMLTextTransformation")
	}
	
	/**
	 * For each UML instance, we generate the corresponding textual description (which will be put in the editor)
	 **/	
	
}

/** Model2Model Transformation Empty Stub **/
class UMLText2UMLTransformation {
	
	new () {
		println("UMLText2UMLTransformation")
	}
	
	/**
	 * For each meta-class instance of the Xtext Ecore model, we create the corresponding UML instance(s). 
	 **/
	
}

/** [NOTES]
 *		The current grammar only uses UML elements. On one hand, there is no need to define any transformation
 * 		to save/load the model. On the other hand, creating a model which is not possible to express using the grammar
 * 		will corrupt the model. In order to avoid this problem, the text serialization could be managed so that
 * 		only those elements included in the grammar are actually inserted into the editor.
 * 
 * 	[PLANNED STEPS]
 * 		- Manage the above mentioned partial coverage
 * 		- Setup another example project presenting non-UML elements (UML Profile)
 */ 