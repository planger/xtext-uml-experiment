/*
 * generated by Xtext 2.10.0
 */
grammar InternalUmlRtText;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.eclipse.papyrusrt.umlrt.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.eclipse.papyrusrt.umlrt.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.eclipse.papyrusrt.umlrt.services.UmlRtTextGrammarAccess;

}
@parser::members {
	private UmlRtTextGrammarAccess grammarAccess;

	public void setGrammarAccess(UmlRtTextGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getGroup()); }
		(rule__Model__Group__0)
		{ after(grammarAccess.getModelAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePackageableElement
entryRulePackageableElement
:
{ before(grammarAccess.getPackageableElementRule()); }
	 rulePackageableElement
{ after(grammarAccess.getPackageableElementRule()); } 
	 EOF 
;

// Rule PackageableElement
rulePackageableElement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPackageableElementAccess().getPackageParserRuleCall()); }
		rulePackage
		{ after(grammarAccess.getPackageableElementAccess().getPackageParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePackage
entryRulePackage
:
{ before(grammarAccess.getPackageRule()); }
	 rulePackage
{ after(grammarAccess.getPackageRule()); } 
	 EOF 
;

// Rule Package
rulePackage 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPackageAccess().getAlternatives()); }
		(rule__Package__Alternatives)
		{ after(grammarAccess.getPackageAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleProtocolContainer
entryRuleProtocolContainer
:
{ before(grammarAccess.getProtocolContainerRule()); }
	 ruleProtocolContainer
{ after(grammarAccess.getProtocolContainerRule()); } 
	 EOF 
;

// Rule ProtocolContainer
ruleProtocolContainer 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getProtocolContainerAccess().getGroup()); }
		(rule__ProtocolContainer__Group__0)
		{ after(grammarAccess.getProtocolContainerAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleProtocol
entryRuleProtocol
:
{ before(grammarAccess.getProtocolRule()); }
	 ruleProtocol
{ after(grammarAccess.getProtocolRule()); } 
	 EOF 
;

// Rule Protocol
ruleProtocol 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getProtocolAccess().getGroup()); }
		(rule__Protocol__Group__0)
		{ after(grammarAccess.getProtocolAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRTMessageSet
entryRuleRTMessageSet
:
{ before(grammarAccess.getRTMessageSetRule()); }
	 ruleRTMessageSet
{ after(grammarAccess.getRTMessageSetRule()); } 
	 EOF 
;

// Rule RTMessageSet
ruleRTMessageSet 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRTMessageSetAccess().getGroup()); }
		(rule__RTMessageSet__Group__0)
		{ after(grammarAccess.getRTMessageSetAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Package__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPackageAccess().getProtocolContainerParserRuleCall_0()); }
		ruleProtocolContainer
		{ after(grammarAccess.getPackageAccess().getProtocolContainerParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getPackageAccess().getModelParserRuleCall_1()); }
		ruleModel
		{ after(grammarAccess.getPackageAccess().getModelParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__0__Impl
	rule__Model__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getModelKeyword_0()); }
	'model'
	{ after(grammarAccess.getModelAccess().getModelKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__1__Impl
	rule__Model__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getModelAction_1()); }
	()
	{ after(grammarAccess.getModelAccess().getModelAction_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__2__Impl
	rule__Model__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getNameAssignment_2()); }
	(rule__Model__NameAssignment_2)
	{ after(grammarAccess.getModelAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__3__Impl
	rule__Model__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getLeftCurlyBracketKeyword_3()); }
	'{'
	{ after(grammarAccess.getModelAccess().getLeftCurlyBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__4__Impl
	rule__Model__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getPackagedElementAssignment_4()); }
	(rule__Model__PackagedElementAssignment_4)*
	{ after(grammarAccess.getModelAccess().getPackagedElementAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getRightCurlyBracketKeyword_5()); }
	'}'
	{ after(grammarAccess.getModelAccess().getRightCurlyBracketKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ProtocolContainer__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ProtocolContainer__Group__0__Impl
	rule__ProtocolContainer__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ProtocolContainer__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProtocolContainerAccess().getProtocolContainerAction_0()); }
	()
	{ after(grammarAccess.getProtocolContainerAccess().getProtocolContainerAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProtocolContainer__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ProtocolContainer__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ProtocolContainer__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProtocolContainerAccess().getUnorderedGroup_1()); }
	(rule__ProtocolContainer__UnorderedGroup_1)
	{ after(grammarAccess.getProtocolContainerAccess().getUnorderedGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Protocol__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Protocol__Group__0__Impl
	rule__Protocol__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Protocol__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProtocolAccess().getProtocolKeyword_0()); }
	'protocol'
	{ after(grammarAccess.getProtocolAccess().getProtocolKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Protocol__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Protocol__Group__1__Impl
	rule__Protocol__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Protocol__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProtocolAccess().getProtocolAction_1()); }
	()
	{ after(grammarAccess.getProtocolAccess().getProtocolAction_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Protocol__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Protocol__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Protocol__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProtocolAccess().getNameAssignment_2()); }
	(rule__Protocol__NameAssignment_2)
	{ after(grammarAccess.getProtocolAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RTMessageSet__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RTMessageSet__Group__0__Impl
	rule__RTMessageSet__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RTMessageSet__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRTMessageSetAccess().getInterfaceKeyword_0()); }
	'interface'
	{ after(grammarAccess.getRTMessageSetAccess().getInterfaceKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RTMessageSet__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RTMessageSet__Group__1__Impl
	rule__RTMessageSet__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RTMessageSet__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRTMessageSetAccess().getRTMessageSetAction_1()); }
	()
	{ after(grammarAccess.getRTMessageSetAccess().getRTMessageSetAction_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RTMessageSet__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RTMessageSet__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RTMessageSet__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRTMessageSetAccess().getNameAssignment_2()); }
	(rule__RTMessageSet__NameAssignment_2)
	{ after(grammarAccess.getRTMessageSetAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ProtocolContainer__UnorderedGroup_1
	@init {
		int stackSize = keepStackSize();
		getUnorderedGroupHelper().enter(grammarAccess.getProtocolContainerAccess().getUnorderedGroup_1());
	}
:
	rule__ProtocolContainer__UnorderedGroup_1__0
	{getUnorderedGroupHelper().canLeave(grammarAccess.getProtocolContainerAccess().getUnorderedGroup_1())}?
;
finally {
	getUnorderedGroupHelper().leave(grammarAccess.getProtocolContainerAccess().getUnorderedGroup_1());
	restoreStackSize(stackSize);
}

rule__ProtocolContainer__UnorderedGroup_1__Impl
	@init {
		int stackSize = keepStackSize();
		boolean selected = false;
	}
:
		(
		( 
			{getUnorderedGroupHelper().canSelect(grammarAccess.getProtocolContainerAccess().getUnorderedGroup_1(), 0)}?=>(
				{
					getUnorderedGroupHelper().select(grammarAccess.getProtocolContainerAccess().getUnorderedGroup_1(), 0);
				}
				{
					selected = true;
				}
				(
					{ before(grammarAccess.getProtocolContainerAccess().getPackagedElementAssignment_1_0()); }
					(rule__ProtocolContainer__PackagedElementAssignment_1_0)
					{ after(grammarAccess.getProtocolContainerAccess().getPackagedElementAssignment_1_0()); }
				)
			)
		)|
		( 
			{getUnorderedGroupHelper().canSelect(grammarAccess.getProtocolContainerAccess().getUnorderedGroup_1(), 1)}?=>(
				{
					getUnorderedGroupHelper().select(grammarAccess.getProtocolContainerAccess().getUnorderedGroup_1(), 1);
				}
				{
					selected = true;
				}
				(
					(
						{ before(grammarAccess.getProtocolContainerAccess().getPackagedElementAssignment_1_1()); }
						(rule__ProtocolContainer__PackagedElementAssignment_1_1)
						{ after(grammarAccess.getProtocolContainerAccess().getPackagedElementAssignment_1_1()); }
					)
					(
						{ before(grammarAccess.getProtocolContainerAccess().getPackagedElementAssignment_1_1()); }
						((rule__ProtocolContainer__PackagedElementAssignment_1_1)=>rule__ProtocolContainer__PackagedElementAssignment_1_1)*
						{ after(grammarAccess.getProtocolContainerAccess().getPackagedElementAssignment_1_1()); }
					)
				)
			)
		)
		)
;
finally {
	if (selected)
		getUnorderedGroupHelper().returnFromSelection(grammarAccess.getProtocolContainerAccess().getUnorderedGroup_1());
	restoreStackSize(stackSize);
}

rule__ProtocolContainer__UnorderedGroup_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ProtocolContainer__UnorderedGroup_1__Impl
	rule__ProtocolContainer__UnorderedGroup_1__1?
;
finally {
	restoreStackSize(stackSize);
}

rule__ProtocolContainer__UnorderedGroup_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ProtocolContainer__UnorderedGroup_1__Impl
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getNameIDTerminalRuleCall_2_0()); }
		RULE_ID
		{ after(grammarAccess.getModelAccess().getNameIDTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__PackagedElementAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getPackagedElementPackageableElementParserRuleCall_4_0()); }
		rulePackageableElement
		{ after(grammarAccess.getModelAccess().getPackagedElementPackageableElementParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProtocolContainer__PackagedElementAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProtocolContainerAccess().getPackagedElementProtocolParserRuleCall_1_0_0()); }
		ruleProtocol
		{ after(grammarAccess.getProtocolContainerAccess().getPackagedElementProtocolParserRuleCall_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProtocolContainer__PackagedElementAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProtocolContainerAccess().getPackagedElementRTMessageSetParserRuleCall_1_1_0()); }
		ruleRTMessageSet
		{ after(grammarAccess.getProtocolContainerAccess().getPackagedElementRTMessageSetParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Protocol__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProtocolAccess().getNameIDTerminalRuleCall_2_0()); }
		RULE_ID
		{ after(grammarAccess.getProtocolAccess().getNameIDTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RTMessageSet__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRTMessageSetAccess().getNameIDTerminalRuleCall_2_0()); }
		RULE_ID
		{ after(grammarAccess.getRTMessageSetAccess().getNameIDTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
