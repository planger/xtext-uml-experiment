/*
 * generated by Xtext 2.10.0
 */
package org.eclipse.papyrus.uml.marte.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.papyrus.uml.marte.marText.HwCache;
import org.eclipse.papyrus.uml.marte.marText.HwProcessor;
import org.eclipse.papyrus.uml.marte.marText.MarTextPackage;
import org.eclipse.papyrus.uml.marte.services.MarTextGrammarAccess;
import org.eclipse.uml2.uml.Component;
import org.eclipse.uml2.uml.Model;
import org.eclipse.uml2.uml.UMLPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;

@SuppressWarnings("all")
public class MarTextSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MarTextGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == MarTextPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MarTextPackage.HW_CACHE:
				sequence_HwCache(context, (HwCache) semanticObject); 
				return; 
			case MarTextPackage.HW_PROCESSOR:
				sequence_HwProcessor(context, (HwProcessor) semanticObject); 
				return; 
			}
		else if (epackage == UMLPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case UMLPackage.COMPONENT:
				sequence_Component(context, (Component) semanticObject); 
				return; 
			case UMLPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Component returns Component
	 *
	 * Constraint:
	 *     (name=ID packagedElement+=Component*)
	 */
	protected void sequence_Component(ISerializationContext context, Component semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Component returns HwCache
	 *     HwCache returns HwCache
	 *
	 * Constraint:
	 *     (name=ID level=INT?)
	 */
	protected void sequence_HwCache(ISerializationContext context, HwCache semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Component returns HwProcessor
	 *     HwProcessor returns HwProcessor
	 *
	 * Constraint:
	 *     (name=ID (nbCores=INT | packagedElement+=Component)*)
	 */
	protected void sequence_HwProcessor(ISerializationContext context, HwProcessor semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     (name=ID packagedElement+=Component*)
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
