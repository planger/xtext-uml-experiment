/*
 * generated by Xtext 2.10.0
 */
package org.eclipse.papyrus.uml.marte.ide.contentassist.antlr;

import com.google.inject.Inject;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.antlr.runtime.RecognitionException;
import org.eclipse.papyrus.uml.marte.ide.contentassist.antlr.internal.InternalMarTextParser;
import org.eclipse.papyrus.uml.marte.services.MarTextGrammarAccess;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

public class MarTextParser extends AbstractContentAssistParser {

	@Inject
	private MarTextGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalMarTextParser createParser() {
		InternalMarTextParser result = new InternalMarTextParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getModelAccess().getAlternatives_3(), "rule__Model__Alternatives_3");
					put(grammarAccess.getComponentAccess().getAlternatives(), "rule__Component__Alternatives");
					put(grammarAccess.getComponentAccess().getAlternatives_2_3(), "rule__Component__Alternatives_2_3");
					put(grammarAccess.getHwProcessorAccess().getAlternatives_3(), "rule__HwProcessor__Alternatives_3");
					put(grammarAccess.getHwCacheAccess().getAlternatives_3(), "rule__HwCache__Alternatives_3");
					put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
					put(grammarAccess.getModelAccess().getGroup_3_0(), "rule__Model__Group_3_0__0");
					put(grammarAccess.getComponentAccess().getGroup_2(), "rule__Component__Group_2__0");
					put(grammarAccess.getComponentAccess().getGroup_2_3_0(), "rule__Component__Group_2_3_0__0");
					put(grammarAccess.getHwProcessorAccess().getGroup(), "rule__HwProcessor__Group__0");
					put(grammarAccess.getHwProcessorAccess().getGroup_3_0_0(), "rule__HwProcessor__Group_3_0_0__0");
					put(grammarAccess.getHwProcessorAccess().getGroup_3_0_0_1(), "rule__HwProcessor__Group_3_0_0_1__0");
					put(grammarAccess.getHwProcessorAccess().getGroup_3_0_1(), "rule__HwProcessor__Group_3_0_1__0");
					put(grammarAccess.getHwProcessorAccess().getGroup_3_0_1_0(), "rule__HwProcessor__Group_3_0_1_0__0");
					put(grammarAccess.getHwCacheAccess().getGroup(), "rule__HwCache__Group__0");
					put(grammarAccess.getHwCacheAccess().getGroup_3_0(), "rule__HwCache__Group_3_0__0");
					put(grammarAccess.getHwCacheAccess().getGroup_3_0_1(), "rule__HwCache__Group_3_0_1__0");
					put(grammarAccess.getModelAccess().getNameAssignment_2(), "rule__Model__NameAssignment_2");
					put(grammarAccess.getModelAccess().getPackagedElementAssignment_3_0_1(), "rule__Model__PackagedElementAssignment_3_0_1");
					put(grammarAccess.getComponentAccess().getNameAssignment_2_2(), "rule__Component__NameAssignment_2_2");
					put(grammarAccess.getComponentAccess().getPackagedElementAssignment_2_3_0_1(), "rule__Component__PackagedElementAssignment_2_3_0_1");
					put(grammarAccess.getHwProcessorAccess().getNameAssignment_2(), "rule__HwProcessor__NameAssignment_2");
					put(grammarAccess.getHwProcessorAccess().getNbCoresAssignment_3_0_0_1_1(), "rule__HwProcessor__NbCoresAssignment_3_0_0_1_1");
					put(grammarAccess.getHwProcessorAccess().getPackagedElementAssignment_3_0_1_0_2(), "rule__HwProcessor__PackagedElementAssignment_3_0_1_0_2");
					put(grammarAccess.getHwCacheAccess().getNameAssignment_2(), "rule__HwCache__NameAssignment_2");
					put(grammarAccess.getHwCacheAccess().getLevelAssignment_3_0_1_1(), "rule__HwCache__LevelAssignment_3_0_1_1");
					put(grammarAccess.getHwProcessorAccess().getUnorderedGroup_3_0(), "rule__HwProcessor__UnorderedGroup_3_0");
				}
			};
		}
		return nameMappings.get(element);
	}

	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			InternalMarTextParser typedParser = (InternalMarTextParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public MarTextGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(MarTextGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
