/**
 * generated by Xtext 2.10.0
 */
package org.eclipse.papyrus.uml.marte.ui;

import com.google.inject.Inject;
import java.io.InputStream;
import java.io.StringReader;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;
import org.eclipse.jface.text.IDocument;
import org.eclipse.papyrus.uml.marte.parser.antlr.MarTextParser;
import org.eclipse.papyrus.uml.marte.ui.trasformations.MarText2UML;
import org.eclipse.papyrus.uml.marte.ui.trasformations.UML2MarText;
import org.eclipse.ui.IEditorInput;
import org.eclipse.ui.IFileEditorInput;
import org.eclipse.uml2.uml.Model;
import org.eclipse.uml2.uml.resource.UMLResource;
import org.eclipse.xtext.parser.IParseResult;
import org.eclipse.xtext.ui.editor.model.XtextDocumentProvider;
import org.eclipse.xtext.util.StringInputStream;
import org.eclipse.xtext.xbase.lib.Exceptions;

/**
 * MarText Document Provider
 */
@SuppressWarnings("all")
public class MarTextDocumentProvider extends XtextDocumentProvider {
  @Inject
  private MarTextParser parser;
  
  @Override
  protected void setDocumentContent(final IDocument document, final InputStream contentStream, final String encoding) throws CoreException {
    final ResourceSetImpl resourceSet = new ResourceSetImpl();
    String _get = document.get();
    String _plus = ("platform:/resource/" + _get);
    URI _createURI = URI.createURI(_plus);
    Resource _resource = resourceSet.getResource(_createURI, 
      true);
    final UMLResource umlResource = ((UMLResource) _resource);
    EList<EObject> _contents = umlResource.getContents();
    EObject _get_1 = _contents.get(0);
    CharSequence _transform = UML2MarText.transform(((Model) _get_1));
    String documentContent = _transform.toString();
    StringInputStream _stringInputStream = new StringInputStream(documentContent);
    super.setDocumentContent(document, _stringInputStream, encoding);
  }
  
  @Override
  protected boolean setDocumentContent(final IDocument document, final IEditorInput editorInput, final String encoding) throws CoreException {
    boolean _xblockexpression = false;
    {
      if ((editorInput instanceof IFileEditorInput)) {
        IFile _file = ((IFileEditorInput) editorInput).getFile();
        IPath _fullPath = _file.getFullPath();
        String _string = _fullPath.toString();
        document.set(_string);
      }
      _xblockexpression = super.setDocumentContent(document, editorInput, encoding);
    }
    return _xblockexpression;
  }
  
  @Override
  protected void doSaveDocument(final IProgressMonitor monitor, final Object element, final IDocument document, final boolean overwrite) throws CoreException {
    try {
      if ((element instanceof IFileEditorInput)) {
        IFile file = ((IFileEditorInput) element).getFile();
        final ResourceSetImpl resourceSet = new ResourceSetImpl();
        IPath _fullPath = file.getFullPath();
        String _string = _fullPath.toString();
        String _plus = ("platform:/resource/" + _string);
        URI _createURI = URI.createURI(_plus);
        final Resource resource = resourceSet.getResource(_createURI, true);
        String _get = document.get();
        StringReader _stringReader = new StringReader(_get);
        IParseResult _parse = this.parser.parse(_stringReader);
        EObject _rootASTElement = _parse.getRootASTElement();
        final Model parsedModel = ((Model) _rootASTElement);
        EList<EObject> _contents = resource.getContents();
        EObject _get_1 = _contents.get(0);
        final Model storedModel = ((Model) _get_1);
        MarText2UML.transform(storedModel, parsedModel);
        resource.save(null);
      } else {
        super.doSaveDocument(monitor, element, document, overwrite);
      }
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
}
